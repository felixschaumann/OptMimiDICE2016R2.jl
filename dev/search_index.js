var documenterSearchIndex = {"docs":
[{"location":"#Changes-from-MimiDICE2016R2","page":"Changes from MimiDICE2016R2","title":"Changes from MimiDICE2016R2","text":"","category":"section"},{"location":"","page":"Changes from MimiDICE2016R2","title":"Changes from MimiDICE2016R2","text":"These functions were included for optimising OptMimiDICE2016R2:","category":"page"},{"location":"","page":"Changes from MimiDICE2016R2","title":"Changes from MimiDICE2016R2","text":"Modules = [] # include OptMimiDICE2016R2\nOrder   = [:function]","category":"page"},{"location":"","page":"Changes from MimiDICE2016R2","title":"Changes from MimiDICE2016R2","text":"OptMimiDICE2016R2.get_model\noptimise_model\nconstruct_objective","category":"page"},{"location":"#Main.OptMimiDICE2016R2.get_model","page":"Changes from MimiDICE2016R2","title":"Main.OptMimiDICE2016R2.get_model","text":"get_model -> m::Model\n\nGets model as in standard Mimi API.\n\n\n\n\n\n","category":"function"},{"location":"#optimise_model","page":"Changes from MimiDICE2016R2","title":"optimise_model","text":"optimise_model(m::Model=get_model(), n_objectives::Int=length(model_years), stop_time::Int=640, tolerance::Float64=1e-6, optimization_algorithm::Symbol=:LN_SBPLX) -> m::Model, diagnostic::Dict\n\nOptimise DICE2016R2 model instance m and return the optimised and updated model.\n\nThe model instance m is not a mandatory argument. In case it is not provided, the function will use a newly constructed model from OptMimiDICE2016R2.get_model. It is worth manually passing a model instance if one wishes to optimise a modified version of DICE, e.g. with updated parameters or updated components.\n\nKeyword arguments:\n\nn_objectives: number of objectives, which corresponds to the number of time steps in the model\nstop_time: time in seconds after which optimisation routine, passed to NLopt.ftol_rel!\ntolerance: tolerance requirement passed to NLopt.ftol_rel!\noptimization_algorithm: algorithm passed to NLopt.ftol_rel!\n\nNotes\n\nImportantly, this implementation of DICE2016R2 has no restrictions on NETs. A rate of emissions reduction :MIU of up to 1.2 is allowed throughout.\nThe second return value is purely for diagnostic purposes and comes directly from the NLopt optimisation. In normal usage, it can be disregarded.\n\nSee also construct_objective.\n\n\n\n\n\n","category":"function"},{"location":"#construct_objective","page":"Changes from MimiDICE2016R2","title":"construct_objective","text":"construct_objective(m::Model, optimised_mitigation::Array{Float64,1}) -> m[:welfare, :UTILITY]\n\nUpdates emissions control rate :MIU in model m and returns the resulting utility vector. This function is called by optimise_model. optimised_mitigation is a vector of :MIU values that is being optimised.\n\nSee also optimise_model.\n\n\n\n\n\n","category":"function"}]
}
